# ORM 접근 : python manage.py shell


# qs = Student(s_name = "홍길동", s_major = '컴퓨터공학', s_grade = 1, s_age = 20, s_gender = 'M') # 데이터 입력
# qs.save() # 데이터 커밋

# Student.objects.create(s_name = "홍길동", s_major = '컴퓨터공학', s_grade = 1, s_age = 20, s_gender = 'M')
  >> qs.save 없이 저장이 됨

# qs = Student.objects.all() # 데이터 검색
# qs[0] , qs[0:2]
# qs[0].s_name
# qs = Student.objects.get(s_name='홍길동') # 조건에 해당되는 데이터 검색 # get은 무조건 1개만 가져옴(객체)/filter는 여러개를 가져옴(Queryset)
# get보다 filter를 사용하는 것이 에러율이 적음

# get : qs.s_name / filter : qs2[0].s_name # filter는 1개여도 무조건 list타입으로 출력됨
# qs = Student.objects.filter(s_age__lt=22)  # s_age < 22

# 비교검색 # __lt : ~보다 작다(<) /  __lte : ~보다 작거나 같다(<=) / __dt : ~보다 크다(>) / __ dte : ~보다 크거가 같다(>=)
           # __isnull : null인 자료검색 / __contains : 문자열 포함 / __startswith : ~ 문자열로 시작 / ~endswith : ~ 문자열로 끝

# 수정 : 해당 데이터 검색 후 컬럼에 값 대입, 그 후 저장
qs = Student.objects.get(s_name='홍길동')
qs.s_age = 25
qs.save()

# 삭제 : delete
qs = Student.objects.get(s_name='홍길동')
qs.delete()

Student.objects.get(s_name='홍길동').delete()


# Shell 종료 : exit

